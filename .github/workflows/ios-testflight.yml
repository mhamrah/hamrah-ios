name: iOS - Build, Test, and Upload to TestFlight

on:
  workflow_dispatch:
    inputs:
      upload_to_testflight:
        description: "Upload the built app to TestFlight"
        required: false
        type: boolean
        default: true
  push:
    branches: [main]
    tags:
      - "v*"

# Pre-populate settings detected from the repository:
# - Xcode project path: hamrah-ios.xcodeproj
# - App target / scheme: hamrah-ios
# - Bundle identifier: app.hamrah.ios
# - Apple Team ID: UR6RM9YCF7
#
# If you need to override any of these, set repo Variables (Settings → Variables → Actions)
# with the same names. Variables take precedence if set.
env:
  XCODE_PROJECT: ${{ vars.XCODE_PROJECT || 'hamrah-ios.xcodeproj' }}
  IOS_SCHEME: ${{ vars.IOS_SCHEME || 'hamrah-ios' }}
  IOS_BUNDLE_ID: ${{ vars.IOS_BUNDLE_ID || 'app.hamrah.ios' }}
  APPLE_TEAM_ID: ${{ vars.APPLE_TEAM_ID || 'UR6RM9YCF7' }}

  # Xcode 16 is required for iOS 18.x SDKs used by this project.
  # Use a broad "16.*" selector to pick the latest Xcode 16 available on the runner.
  XCODE_VERSION: ${{ vars.XCODE_VERSION || '16.*' }}

  DERIVED_DATA_PATH: ${{ runner.temp }}/DerivedData
  BUILD_DIR: ${{ runner.temp }}/build
  EXPORT_DIR_IOS: ${{ runner.temp }}/export-ios

jobs:
  ios-build-test-upload:
    name: Build, Test, and Upload iOS
    runs-on: macos-15
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode ${{ env.XCODE_VERSION }}
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Show environment info
        run: |
          sw_vers
          xcodebuild -version
          xcrun simctl list devices

      - name: Install xcpretty (for readable logs)
        run: |
          gem install xcpretty
          xcpretty --version

      - name: Import Apple code-signing certificates
        uses: apple-actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.APPSTORE_CERTIFICATES_FILE_BASE64 }}
          p12-password: ${{ secrets.APPSTORE_CERTIFICATES_PASSWORD }}

      - name: Download iOS App Store provisioning profile
        uses: apple-actions/download-provisioning-profiles@v4
        with:
          bundle-id: ${{ env.IOS_BUNDLE_ID }}
          profile-type: IOS_APP_STORE
          issuer-id: ${{ vars.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ vars.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}

      - name: Prepare build directories
        run: |
          mkdir -p "${DERIVED_DATA_PATH}" "${BUILD_DIR}" "${EXPORT_DIR_IOS}"

      - name: Run iOS unit tests (Simulator)
        env:
          NSUnbufferedIO: "YES"
        run: |
          set -euo pipefail
          xcodebuild \
            -project "${XCODE_PROJECT}" \
            -scheme "${IOS_SCHEME}" \
            -destination 'platform=iOS Simulator,name=iPhone 15' \
            -configuration Debug \
            -derivedDataPath "${DERIVED_DATA_PATH}" \
            -skipPackagePluginValidation \
            -enableCodeCoverage YES \
            clean test | xcpretty || exit ${PIPESTATUS[0]}

      - name: Archive iOS (Release)
        run: |
          set -euo pipefail
          xcodebuild \
            -project "${XCODE_PROJECT}" \
            -scheme "${IOS_SCHEME}" \
            -configuration Release \
            -sdk iphoneos \
            -destination 'generic/platform=iOS' \
            -derivedDataPath "${DERIVED_DATA_PATH}" \
            -allowProvisioningUpdates \
            -skipPackagePluginValidation \
            -archivePath "${BUILD_DIR}/App-iOS.xcarchive" \
            clean archive | xcpretty || exit ${PIPESTATUS[0]}

      - name: Create iOS export options
        run: |
          cat > "${RUNNER_TEMP}/export-options-ios.plist" <<'PLIST'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>app-store</string>
            <key>teamID</key><string>${APPLE_TEAM_ID}</string>
            <key>uploadSymbols</key><true/>
            <key>uploadBitcode</key><false/>
            <key>signingStyle</key><string>automatic</string>
          </dict>
          </plist>
          PLIST

      - name: Export iOS .ipa
        run: |
          set -euo pipefail
          xcodebuild -exportArchive \
            -archivePath "${BUILD_DIR}/App-iOS.xcarchive" \
            -exportPath "${EXPORT_DIR_IOS}" \
            -exportOptionsPlist "${RUNNER_TEMP}/export-options-ios.plist" \
            -allowProvisioningUpdates | xcpretty || exit ${PIPESTATUS[0]}
          echo "iOS export content:"
          ls -la "${EXPORT_DIR_IOS}"

      - name: Find iOS .ipa path
        id: find_ios_ipa
        shell: bash
        run: |
          set -euo pipefail
          IPA_PATH="$(find "${EXPORT_DIR_IOS}" -maxdepth 2 -type f -name '*.ipa' | head -n1 || true)"
          if [[ -z "${IPA_PATH}" ]]; then
            echo "Failed to locate .ipa in ${EXPORT_DIR_IOS}" >&2
            exit 1
          fi
          echo "path=${IPA_PATH}" >> "${GITHUB_OUTPUT}"

      - name: Upload iOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-artifacts
          path: |
            ${{ steps.find_ios_ipa.outputs.path }}
            ${{ env.BUILD_DIR }}/App-iOS.xcarchive
            ${{ env.EXPORT_DIR_IOS }}
          retention-days: 7

      - name: Upload iOS to TestFlight
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.upload_to_testflight == true || startsWith(github.ref, 'refs/tags/') }}
        uses: apple-actions/upload-testflight-build@v3
        with:
          app-path: ${{ steps.find_ios_ipa.outputs.path }}
          issuer-id: ${{ vars.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ vars.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
# Configuration notes:
# - Required repository Variables:
#     APPSTORE_ISSUER_ID, APPSTORE_API_KEY_ID
#   Optional (override detected values):
#     XCODE_PROJECT, IOS_SCHEME, IOS_BUNDLE_ID, APPLE_TEAM_ID, XCODE_VERSION
#
# - Required repository Secrets:
#     APPSTORE_API_PRIVATE_KEY          (contents of AuthKey_<KEY_ID>.p8)
#     APPSTORE_CERTIFICATES_FILE_BASE64 (base64 of your .p12 containing Apple Distribution cert + key)
#     APPSTORE_CERTIFICATES_PASSWORD    (password used when exporting the .p12)
#
# - This repo does not currently contain a macOS app target, so macOS packaging/upload is omitted.
