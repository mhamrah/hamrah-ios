name: iOS and macOS - Build, Test, and Upload to TestFlight

on:
  workflow_dispatch:
    inputs:
      upload_to_testflight:
        description: "Upload the built app to TestFlight"
        required: false
        type: boolean
        default: true

# Pre-populate settings detected from the repository:
# - Xcode project path: hamrah-ios.xcodeproj
# - App target / scheme: hamrah-ios
# - Bundle identifier: app.hamrah.ios
# - Apple Team ID: UR6RM9YCF7
#
# If you need to override any of these, set repo Variables (Settings → Variables → Actions)
# with the same names. Variables take precedence if set.
env:
  XCODE_PROJECT: ${{ vars.XCODE_PROJECT || 'hamrah-ios.xcodeproj' }}
  IOS_SCHEME: ${{ vars.IOS_SCHEME || 'hamrah-ios' }}
  IOS_BUNDLE_ID: ${{ vars.IOS_BUNDLE_ID || 'app.hamrah.ios' }}
  MACOS_SCHEME: ${{ vars.MACOS_SCHEME || '' }}
  MACOS_BUNDLE_ID: ${{ vars.MACOS_BUNDLE_ID || '' }}
  APPLE_TEAM_ID: ${{ vars.APPLE_TEAM_ID || 'UR6RM9YCF7' }}

  # Xcode 16 is required for iOS 18.x SDKs used by this project.
  # Use a broad "16.*" selector to pick the latest Xcode 16 available on the runner.
  XCODE_VERSION: ${{ vars.XCODE_VERSION || 'latest-stable' }}

jobs:
  ios-build-test-upload:
    name: Build, Test, and Upload iOS
    runs-on: macos-26
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Xcode ${{ env.XCODE_VERSION }}
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Show environment info
        run: |
          sw_vers
          xcodebuild -version

      - name: Install xcpretty (for readable logs)
        run: |
          gem install xcpretty
          xcpretty --version

      - name: Install Certificates and Provisioning Profiles
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPSTORE_CERTIFICATES_FILE_BASE64 }}
          P12_PASSWORD: ${{ secrets.APPSTORE_CERTIFICATES_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
            PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Provide a fallback keychain password if empty (GitHub secret not set)
          if [ -z "$KEYCHAIN_PASSWORD" ]; then
            KEYCHAIN_PASSWORD="temp_keychain_pass"
          fi

          # Import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # Install provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

          echo "=== Available signing identities (after import) ==="
          security find-identity -v -p codesigning $KEYCHAIN_PATH || true
          echo "=== Provisioning Profiles ==="
          ls -l ~/Library/MobileDevice/Provisioning\ Profiles || true
          echo "=== Done installing signing assets ==="
      - name: Pre-flight Diagnostics
        run: |
          echo "=== Schemes ==="
          xcodebuild -list -project "$XCODE_PROJECT"
          echo "=== Key Build Settings (Release) ==="
          xcodebuild -showBuildSettings -project "$XCODE_PROJECT" -scheme "$IOS_SCHEME" -configuration Release | egrep 'DEVELOPMENT_TEAM|CODE_SIGN_STYLE|CODE_SIGN_IDENTITY|PROVISIONING_PROFILE_SPECIFIER|PRODUCT_BUNDLE_IDENTIFIER'

      - name: Build Archive
        run: |
          set -o pipefail
          echo "=== Extract provisioning profile metadata ==="
          PROFILE_PATH=$(ls ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision 2>/dev/null || true)
          if [ -f "$PROFILE_PATH" ]; then
            security cms -D -i "$PROFILE_PATH" > $RUNNER_TEMP/profile.plist
            PROFILE_NAME=$(/usr/libexec/PlistBuddy -c 'Print :Name' $RUNNER_TEMP/profile.plist || echo "")
            PROFILE_UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' $RUNNER_TEMP/profile.plist || echo "")
            echo "Detected provisioning profile: $PROFILE_NAME ($PROFILE_UUID)"
          else
            echo "Provisioning profile not found at expected path; proceeding may fail."
            PROFILE_NAME=""
          fi
          echo "=== Archive (manual Distribution signing) ==="
          xcodebuild -project "$XCODE_PROJECT" \
                     -scheme "$IOS_SCHEME" \
                     -archivePath "$RUNNER_TEMP/${IOS_SCHEME}.xcarchive" \
                     -configuration Release \
                     -destination 'generic/platform=iOS' \
                     DEVELOPMENT_TEAM="$APPLE_TEAM_ID" \
                     CODE_SIGN_STYLE=Manual \
                     CODE_SIGN_IDENTITY="Apple Distribution" \
                     OTHER_CODE_SIGN_FLAGS="--keychain $RUNNER_TEMP/app-signing.keychain-db" \
                     clean archive | tee build.log | xcpretty
          BUILD_STATUS=${PIPESTATUS[0]}
          EXIT_CODE=$BUILD_STATUS
          echo "Archive step exit code: $EXIT_CODE"
          echo "Build log stored at ./build.log"
          exit $EXIT_CODE

      - name: Show Build Log Tail on Failure
        if: failure()
        run: |
          echo "===== Last 400 lines of build.log (failure) ====="
          tail -400 build.log || true

      - name: Upload Build Log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-log
          path: build.log
          if-no-files-found: warn
          retention-days: 7

      - name: Export Archive
        run: |
          set -o pipefail
          echo "=== Export archive (manual signing) ==="
          xcodebuild -exportArchive \
            -archivePath "$RUNNER_TEMP/${IOS_SCHEME}.xcarchive" \
            -exportPath "$RUNNER_TEMP/${IOS_SCHEME}" \
            -exportOptionsPlist ExportOptions.plist 2>&1 | tee export.log
          EXPORT_STATUS=${PIPESTATUS[0]}
          if [ $EXPORT_STATUS -ne 0 ]; then
            echo "::error::Manual export failed (status $EXPORT_STATUS)."
            exit $EXPORT_STATUS
          fi
          echo "=== Export completed, checking output directory ==="
          ls -la $RUNNER_TEMP/${IOS_SCHEME}/ || echo "Export directory not found"
          find $RUNNER_TEMP/${IOS_SCHEME} -name "*.ipa" -exec ls -la {} \; || echo "No .ipa files found in export directory"

      - name: Upload Export Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: export-logs
          path: export.log
          if-no-files-found: ignore
          retention-days: 7

      - name: Debug Environment and File Paths
        run: |
          echo "=== Environment Variables ==="
          env | grep -E "(RUNNER_TEMP|IOS_SCHEME|XCODE_PROJECT)" | sort
          echo "=== Runner temp directory contents ==="
          ls -la ${{ runner.temp }}/
          echo "=== Scheme-specific directory contents ==="
          ls -la ${{ runner.temp }}/${IOS_SCHEME}/ || echo "Directory not found"
          echo "=== Looking for .ipa files ==="
          find ${{ runner.temp }} -name "*.ipa" -exec ls -la {} \; || echo "No .ipa files found"

      - name: Upload to TestFlight
        uses: apple-actions/upload-testflight-build@v1
        env:
          apiKey: ${{ secrets.APPLE_API_KEY }}
          apiIssuer: ${{ secrets.APPLE_API_ISSUER }}
        with:
          app-path: ${{ runner.temp }}/hamrah-ios/hamrah-ios.ipa
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
